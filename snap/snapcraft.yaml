%YAML 1.1
---
# Snapcraft Recipe for BLOCK
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft format
#   https://docs.snapcraft.io/the-snapcraft-format/8337
# * Snap Documentation
#   https://docs.snapcraft.io
# * Topics under the doc category in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft

# All following comments, including this one, are designed to be stripped
# before contributing the recipe to the upstream

# BLOCK, block, block-launch
# are placeholders text meant to be replaced by appropriate content
name: block
title: BLOCK
summary: Satisfying!  The new block breaking experience.
description: |
  This is the unofficial snap of the BLOCK game made by KENTA(22), due to licensing restrictions the actual software is downloaded from the last official site's Wayback Machine backup during runtime instead of bundling it in the snap.

  NOTE: This is NOT an official distribution of BLOCK,
  please refer to the snap's own issue tracker for support:

  Issues Â· brlin-tw/block-snap
  https://github.com/brlin-tw/block-snap/issues

# The path of icon to represent the snap, relative to the source tree directory
# Only PNG or SVG image is supported, dimension must be greater than 256x256px
icon: snap/gui/block.256px.png

# The license of this application, in SPDX format
# NOTE: Currently only supports SPDX 2.1 license expressions, as described in Appendix IV of
# https://spdx.org/spdx-specification-21-web-version
# Supported expressions:
# https://github.com/snapcore/snapd/blob/HEAD/spdx/licenses.go
license: Proprietary

# Version string just for humans, typically '1.2+git' or '1.3.2'
# The wrapping single quotes are often required to avoid the version string
# being accidentally interpreted as a YAML non-string(like '1', '1.2').
# http://yaml.org/type
# https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html#surprising-behaviour
# NOTE: This key is mutual exclusive with the `adopt-info` key
#version: '1.30'

adopt-info: main

# Snapd feature set and version the snap requires in order to work
# https://forum.snapcraft.io/t/snapcraft-top-level-metadata/8334#heading--assumes
assumes:
  - command-chain

# Base runtime
# The common runtime for the snap to run on, or `bare` for static linked applications
# https://docs.snapcraft.io/snapcraft-top-level-metadata/8334#heading--base
base: core18

# Wine snaps only buildable on these platforms
architectures:
  - build-on: amd64
  - build-on: i386

# Security confinement
# Use `devmode` to getting started
# Flip to `strict` once you have the right plugs and slots,
# or `classic` once you determine that strict confinement is not currently possible
confinement: strict

# Snap Grade
# Use `devel` to getting started
# Flip to `stable` once you determine that the snap is matured, only `stable` grade
# snaps can be promoted to `candidate` and `stable` channels
grade: stable

# Run `snapcraft help sources` for supported keywords on pulling a part's source ingredients
# Run `snapcraft plugins` for supported build helper plugins
# Run `snapcraft help plugins` for supported keywords on building a part
# For `override-*` scriptlets used to modify behavior of certain part's lifecycle phase, check out:
# https://docs.snapcraft.io/scriptlets/4892
parts:
  # Launcher programs to fix problems at runtime
  launchers:
    source: snap/local/launchers
    plugin: dump
    organize:
      '*': bin/
    stage:
      - -bin/README.*

  launchers-runtime-deps:
    plugin: nil
    stage-packages:
      # For fetching application assets
      - curl

      # For unpacking main program
      - lhasa

      # For unpacking sound effects
      - unzip
    override-stage: |
      ln \
        -s \
        lhasa \
        "${SNAPCRAFT_PART_INSTALL}/usr/bin/lha"

      snapcraftctl stage

  sommelier:
    plugin: make
    source: https://github.com/snapcrafters/sommelier-core.git
    source-branch: '1.0'

  main:
    plugin: nil
    build-packages:
      - git
    override-pull: |
      recipe_commit="$(
        git \
          -C "${SNAPCRAFT_PROJECT_DIR}" \
          describe \
            --abbrev=7 \
            --always \
            --dirty \
            --tags
      )"

      snapcraftctl set-version \
        "1.30+pkg${recipe_commit}"

# Apps that are exposed by the snap package
# If the _app_name_ is identical with the _snap_name_ it can be directly run
# with `_snap_name_` or `snap run _snap_name_` commands, otherwise it can only be run
# via `_snap_name_._app_name_` or `snap run _snap_name_._app_name_`
apps:
  block:
    extensions: [gnome-3-28]
    # The adapter to set up runtime environment at the launch of the snap
    # NOTE: The `command-chain` property is only supported by the `full` adapter
    adapter: full

    # An *relative path* to an executable file root from the `prime` directory to be executed, and its command-line arguments
    # NOTE: The right angle bracket at the beginning of the value of the `command` keyword starts a YAML folded style block scalar, refer the following spec document for more info: http://yaml.org/spec/1.2/spec.html#id2796251
    command: bin/sommelier run-exe

    # The commands that are run, in order, before running the one specified by the `command` key
    command-chain:
      - bin/block-launch

    environment:
      RUN_EXE: "$SNAP_USER_COMMON/block130/block130.exe"

      # Prevent pop-ups about Wine Mono and Wine Gecko
      WINEDLLOVERRIDES: "$WINEDLLOVERRIDES;mscoree,mshtml="

    plugs: # change these as required
      # Target application plays a sound when loading is finish, etc.
      - audio-playback

      - network

  wine:
    extensions: [gnome-3-28]
    command: bin/sommelier
    plugs:
      - home
      - network

  winetricks:
    extensions: [gnome-3-28]
    command: bin/sommelier winetricks
    plugs:
      - home
      - network

# Refer the following documentation for asserting interface plugs and slots in a security confined snap:
# Interface management - doc - snapcraft.io
# https://docs.snapcraft.io/interface-management/6154
# Supported interfaces - doc - snapcraft.io
# https://docs.snapcraft.io/supported-interfaces/7744
# Non-A/C: Non-autoconnect interface
plugs:
  # Network access
  #network:

  # This contains all the dependencies Wine needs
  wine-runtime:
    interface: content
    target: $SNAP/wine-runtime
    default-provider: wine-platform-runtime
  # This contains the Wine binaries themselves
  wine-6-stable:
    interface: content
    target: $SNAP/wine-platform
    default-provider: wine-platform-6-stable
